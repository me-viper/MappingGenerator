using System;

namespace Talk2Bits.MappingGenerator.Abstractions
{
    /// <summary>
    /// Specifies MappingGenerator anchor class.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
    public class MappingGeneratorAttribute : Attribute
    {
        public MappingGeneratorAttribute(Type source, Type destination)
        {
            Source = source ?? throw new ArgumentNullException(nameof(source));
            Destination = destination ?? throw new ArgumentNullException(nameof(destination));
        }

        /// <summary>
        /// Type of source.
        /// </summary>
        public Type Source { get; }

        /// <summary>
        /// Type of destination.
        /// </summary>
        public Type Destination { get; }

        /// <summary>
        /// Defines how MappingGenerator will handle missing mappings.
        /// </summary>
        public MissingMappingBehavior MissingMappingBehavior { get; set; }

        /// <summary>
        /// Defines how MappingGenerator implements <see cref="IMapper{TSource,TDestination}"/> interface.
        /// </summary>
        public ImplementationType ImplementationType { get; set; }

        /// <summary>
        /// Defines which accessibility modifiers constructors generated by MappingGenerator will have.
        /// </summary>
        public ConstructorAccessibility ConstructorAccessibility { get; set; } = ConstructorAccessibility.Public;

        /// <summary>
        /// Name of the mapping.
        /// </summary>
        public string Name { get; set; } = string.Empty;
    }
}
